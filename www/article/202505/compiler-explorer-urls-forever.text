Compiler Explorer and the Promise of URLs That Last Forever
Date: 2025-05-28 09:55:00 America/Chicago
Status: Draft
Summary: How we're preserving 12,000 legacy links as Google's URL shortener rides into the sunset
Label: Blog, Coding, Compiler Explorer

The history is this: back in the old days (2012), we used to store the entire [Compiler Explorer](https://godbolt.org) state in the URL. That got unwieldy, so we added support for Google's link shortener [goo.gl](https://goo.gl) in March 2014. That meant short links were of the form `goo.gl/abc123`. Clicking a goo.gl link would eventually redirect you to the full URL link on our site, and we'd decode the state from the URL.

In 2016, [Stack Overflow](https://stackoverflow.com) banned link shorteners because of how they cloak the actual destination of links. Abusers could post innocent goo.gl links that directed folks unwittingly to bad content. However, that meant our Compiler Explorer links were also affected. At the time, we had no intention of storing any user data, so we came up with a hack: we still used goo.gl, but we then rewrote the link we handed out to be `godbolt.org/g/abc123` (where the abc123 is the goo.gl unique ID). We then redirected any hits to `/g/abc123` to `goo.gl/abc123`, which then (finally) redirected back to godbolt.org with the appropriate state in the URL. Later, we used Google's API to avoid the redirection dance.

By 2018, the limitations of storing state in the URL started to bite. There's a limit to how long a URL can be (and we'd already started compressing the data in the URL), so we needed a better solution. We finally implemented our own storage solution: we hash the input, save the state as a JSON document on [S3](https://aws.amazon.com/s3/) under the hash, and then give out a shortened form of the hash as a `godbolt.org/z/hashbit` URL. We use [DynamoDB](https://aws.amazon.com/dynamodb/) to store the mapping of shortened hashes to the full paths (accounting for partial collisions, etc.). And, amusingly, we check the short link's hash for rude words(!) and add deliberate extra information into the document until we no longer get a rude word. Yes, [a real bug](https://github.com/compiler-explorer/compiler-explorer/issues/1297) we had to fix.

We still support the `godbolt.org/g/abc123` links, but... despite Google saying their service would be up forever, it went read-only a few years back, and now they're [finally sunsetting it](https://developers.googleblog.com/en/google-url-shortener-links-will-no-longer-be-available/) in August 2025.

That means we'll no longer be able to resolve goo.gl-based links! That's... not ideal. One of my founding principles is that Compiler Explorer links should last forever. I can't do anything about the _really_ legacy actual `goo.gl` links, but I can do something about the `godbolt.org/g/abc123` links!

Over the last few days, I've been scraping everywhere I can think of, collating the links I can find out in the wild, and compiling my own database of links -- and importantly, the URLs they redirect to. So far, I've found 12,000 links from scraping:

- [Google](https://developers.google.com/custom-search) (using their web search API)
- [GitHub](https://docs.github.com/en/rest) (using their API)
- Our own (somewhat limited) web logs
- The [archive.org](https://archive.org) Stack Overflow data dumps
- Archive.org's own list of archived webpages

<p class="picture">
<img src="/202505/sqlite.png" width="600" height="128"
 alt="SQLite terminal showing query result: SELECT COUNT(*) from google_links; returning 12298 rescued links"/>
<br/>The current count of rescued goo.gl links in my database
</p>

We're now using the database in preference to `goo.gl` internally, so I'm also keeping an eye on new "g" links that we don't yet have.

If you have a secret cache of godbolt.org/g/abc123 links you have lying around, now's the time to visit each of them! That will ensure they're in my web logs and I'll add them to the database. Otherwise, sadly, in August 2025 those links will stop working.

## The Bigger Picture

This whole saga reinforces why I'm skeptical of relying on third-party services for critical infrastructure. Google's URL shortener was supposed to be permanent. The redirect chains we built were clever workarounds that bought us time, but ultimately, the only way to truly keep a promise of "URLs that last forever" is to own the entire stack.

It's been a fascinating archaeological dig through the internet, hunting down these legacy links. Each one represents someone's attempt to share knowledge, ask a question, or demonstrate a concept. Preserving them feels like preserving a small piece of programming history.

So if you've got old Compiler Explorer links bookmarked somewhere, dust them off and give them a click. You'll be helping preserve a little corner of the internet's shared knowledge -- and keeping a promise I made back in 2012.

---


### Disclaimer

This article was written by a human, but links were suggested by and grammar checked by an LLM.
