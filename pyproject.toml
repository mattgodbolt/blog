[tool.poetry]
name = "xaniablog"
version = "0.1.0"
description = "Matt Godbolt's personal blog generator"
authors = ["Matt Godbolt <matt@godbolt.org>"]
readme = "README.md"
packages = [{include = "pygen"}]

[tool.poetry.dependencies]
python = "^3.10"
pytz = "^2024.1"
markdown = "^3.5.2"
pygments = "^2.17.2"
awscli = "^1.32.91"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.0"
black = "^24.2.0"
isort = "^5.13.2"
ruff = "^0.2.1"
mypy = "^1.8.0"
types-pytz = "^2024.1.0.20240416"
types-markdown = "^3.5.0.20240505"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "RUF",  # ruff-specific rules
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["pygen"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
